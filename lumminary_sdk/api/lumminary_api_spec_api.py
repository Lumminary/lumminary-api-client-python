# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lumminary_sdk.api_client import ApiClient


class LumminaryAPISpecApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_authorizations_queue(self, product_id, **kwargs):  # noqa: E501
        """get_authorizations_queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_authorizations_queue(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str seq_num_start: The first sequence number from which to fetch (the sequence number of the last processed authorization)
        :param str x_fields: An optional fields mask
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_authorizations_queue_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorizations_queue_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def get_authorizations_queue_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """get_authorizations_queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_authorizations_queue_with_http_info(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str seq_num_start: The first sequence number from which to fetch (the sequence number of the last processed authorization)
        :param str x_fields: An optional fields mask
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'seq_num_start', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorizations_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_authorizations_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []
        if 'seq_num_start' in params:
            query_params.append(('seq_num_start', params['seq_num_start']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productId}/authorizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Authorization]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_gene(self, client_id, dataset_id, gene_symbol, **kwargs):  # noqa: E501
        """Get gene by symbol  # noqa: E501

        Gets A gene by its symbol, which can be found by querying the reference/ resource.  Will return a 404 if a gene exists as a reference, but its genomic coordinates intersect no SNPs in the dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_gene(client_id, dataset_id, gene_symbol, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str gene_symbol: The symbol of a gene to be fetched (required)
        :param str x_fields: An optional fields mask
        :return: ClientGene
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_client_gene_with_http_info(client_id, dataset_id, gene_symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_gene_with_http_info(client_id, dataset_id, gene_symbol, **kwargs)  # noqa: E501
            return data

    def get_client_gene_with_http_info(self, client_id, dataset_id, gene_symbol, **kwargs):  # noqa: E501
        """Get gene by symbol  # noqa: E501

        Gets A gene by its symbol, which can be found by querying the reference/ resource.  Will return a 404 if a gene exists as a reference, but its genomic coordinates intersect no SNPs in the dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_gene_with_http_info(client_id, dataset_id, gene_symbol, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str gene_symbol: The symbol of a gene to be fetched (required)
        :param str x_fields: An optional fields mask
        :return: ClientGene
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'dataset_id', 'gene_symbol', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_gene" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_gene`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `get_client_gene`")  # noqa: E501
        # verify the required parameter 'gene_symbol' is set
        if ('gene_symbol' not in params or
                params['gene_symbol'] is None):
            raise ValueError("Missing the required parameter `gene_symbol` when calling `get_client_gene`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'gene_symbol' in params:
            path_params['geneSymbol'] = params['gene_symbol']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/datasets/{datasetId}/genes/{geneSymbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientGene',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_snp(self, client_id, dataset_id, snp_id, **kwargs):  # noqa: E501
        """Get SNP information  # noqa: E501

        Gets SNP information, as provided by the dataset.  If fetching this as an product, the client must have already granted access to the snip (see the 'products' group)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_snp(client_id, dataset_id, snp_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str snp_id: The rsId of a SNP to be fetched (required)
        :param str x_fields: An optional fields mask
        :return: ClientSNP
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_client_snp_with_http_info(client_id, dataset_id, snp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_snp_with_http_info(client_id, dataset_id, snp_id, **kwargs)  # noqa: E501
            return data

    def get_client_snp_with_http_info(self, client_id, dataset_id, snp_id, **kwargs):  # noqa: E501
        """Get SNP information  # noqa: E501

        Gets SNP information, as provided by the dataset.  If fetching this as an product, the client must have already granted access to the snip (see the 'products' group)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_snp_with_http_info(client_id, dataset_id, snp_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str snp_id: The rsId of a SNP to be fetched (required)
        :param str x_fields: An optional fields mask
        :return: ClientSNP
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'dataset_id', 'snp_id', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_snp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_snp`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `get_client_snp`")  # noqa: E501
        # verify the required parameter 'snp_id' is set
        if ('snp_id' not in params or
                params['snp_id'] is None):
            raise ValueError("Missing the required parameter `snp_id` when calling `get_client_snp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'snp_id' in params:
            path_params['snpId'] = params['snp_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/datasets/{datasetId}/snps/{snpId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientSNP',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_snp_group(self, client_id, dataset_id, **kwargs):  # noqa: E501
        """get_client_snp_group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_snp_group(client_id, dataset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str x_fields: An optional fields mask
        :return: list[ClientSNP]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_client_snp_group_with_http_info(client_id, dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_snp_group_with_http_info(client_id, dataset_id, **kwargs)  # noqa: E501
            return data

    def get_client_snp_group_with_http_info(self, client_id, dataset_id, **kwargs):  # noqa: E501
        """get_client_snp_group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_snp_group_with_http_info(client_id, dataset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str x_fields: An optional fields mask
        :return: list[ClientSNP]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'dataset_id', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_snp_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_snp_group`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `get_client_snp_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/datasets/{datasetId}/snps/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientSNP]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene(self, database_name, accession, **kwargs):  # noqa: E501
        """Generic gene information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_gene(database_name, accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str database_name: The name of the database to search. E.g: Genbank (required)
        :param str accession: The accession within the selected database (required)
        :param int dbsnp_build: The dbSNP build for which to consider snps belonging to the gene. Defaults to 149
        :param str reference_genome: The reference genome for which gene annotations will be returned. Defaults to GRCh37p13
        :param str x_fields: An optional fields mask
        :return: PublicGene
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_gene_with_http_info(database_name, accession, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_with_http_info(database_name, accession, **kwargs)  # noqa: E501
            return data

    def get_gene_with_http_info(self, database_name, accession, **kwargs):  # noqa: E501
        """Generic gene information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_gene_with_http_info(database_name, accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str database_name: The name of the database to search. E.g: Genbank (required)
        :param str accession: The accession within the selected database (required)
        :param int dbsnp_build: The dbSNP build for which to consider snps belonging to the gene. Defaults to 149
        :param str reference_genome: The reference genome for which gene annotations will be returned. Defaults to GRCh37p13
        :param str x_fields: An optional fields mask
        :return: PublicGene
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'accession', 'dbsnp_build', 'reference_genome', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `get_gene`")  # noqa: E501
        # verify the required parameter 'accession' is set
        if ('accession' not in params or
                params['accession'] is None):
            raise ValueError("Missing the required parameter `accession` when calling `get_gene`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'accession' in params:
            path_params['accession'] = params['accession']  # noqa: E501

        query_params = []
        if 'dbsnp_build' in params:
            query_params.append(('dbsnp_build', params['dbsnp_build']))  # noqa: E501
        if 'reference_genome' in params:
            query_params.append(('reference_genome', params['reference_genome']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/reference/genes/databases/{databaseName}/accessions/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicGene',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product(self, product_id, **kwargs):  # noqa: E501
        """Get product details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_product(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str x_fields: An optional fields mask
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_product_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def get_product_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """Get product details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_product_with_http_info(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str x_fields: An optional fields mask
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_authorization(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """get_product_authorization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_product_authorization(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :param str x_fields: An optional fields mask
        :return: Authorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_product_authorization_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_authorization_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
            return data

    def get_product_authorization_with_http_info(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """get_product_authorization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_product_authorization_with_http_info(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :param str x_fields: An optional fields mask
        :return: Authorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'authorization_id', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_authorization`")  # noqa: E501
        # verify the required parameter 'authorization_id' is set
        if ('authorization_id' not in params or
                params['authorization_id'] is None):
            raise ValueError("Missing the required parameter `authorization_id` when calling `get_product_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'authorization_id' in params:
            path_params['authorizationId'] = params['authorization_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productId}/authorizations/{authorizationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Authorization',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reference_chromosome(self, genome_build_accession, chromosome_accession, range_start, range_stop, **kwargs):  # noqa: E501
        """Sequence for a region of the reference genome  # noqa: E501

        Fetch a closed interval of nucleotides on a given chromosome. Includes start and stop positions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_chromosome(genome_build_accession, chromosome_accession, range_start, range_stop, async=True)
        >>> result = thread.get()

        :param async bool
        :param str genome_build_accession: The accession of the reference genome (required)
        :param str chromosome_accession: The accession to the chromosome (required)
        :param int range_start: Location on the chromosome (required)
        :param int range_stop: Location on the chromosome (required)
        :param str x_fields: An optional fields mask
        :return: ReferenceSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_reference_chromosome_with_http_info(genome_build_accession, chromosome_accession, range_start, range_stop, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reference_chromosome_with_http_info(genome_build_accession, chromosome_accession, range_start, range_stop, **kwargs)  # noqa: E501
            return data

    def get_reference_chromosome_with_http_info(self, genome_build_accession, chromosome_accession, range_start, range_stop, **kwargs):  # noqa: E501
        """Sequence for a region of the reference genome  # noqa: E501

        Fetch a closed interval of nucleotides on a given chromosome. Includes start and stop positions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_chromosome_with_http_info(genome_build_accession, chromosome_accession, range_start, range_stop, async=True)
        >>> result = thread.get()

        :param async bool
        :param str genome_build_accession: The accession of the reference genome (required)
        :param str chromosome_accession: The accession to the chromosome (required)
        :param int range_start: Location on the chromosome (required)
        :param int range_stop: Location on the chromosome (required)
        :param str x_fields: An optional fields mask
        :return: ReferenceSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['genome_build_accession', 'chromosome_accession', 'range_start', 'range_stop', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_chromosome" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'genome_build_accession' is set
        if ('genome_build_accession' not in params or
                params['genome_build_accession'] is None):
            raise ValueError("Missing the required parameter `genome_build_accession` when calling `get_reference_chromosome`")  # noqa: E501
        # verify the required parameter 'chromosome_accession' is set
        if ('chromosome_accession' not in params or
                params['chromosome_accession'] is None):
            raise ValueError("Missing the required parameter `chromosome_accession` when calling `get_reference_chromosome`")  # noqa: E501
        # verify the required parameter 'range_start' is set
        if ('range_start' not in params or
                params['range_start'] is None):
            raise ValueError("Missing the required parameter `range_start` when calling `get_reference_chromosome`")  # noqa: E501
        # verify the required parameter 'range_stop' is set
        if ('range_stop' not in params or
                params['range_stop'] is None):
            raise ValueError("Missing the required parameter `range_stop` when calling `get_reference_chromosome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_build_accession' in params:
            path_params['genomeBuildAccession'] = params['genome_build_accession']  # noqa: E501
        if 'chromosome_accession' in params:
            path_params['chromosomeAccession'] = params['chromosome_accession']  # noqa: E501

        query_params = []
        if 'range_start' in params:
            query_params.append(('range_start', params['range_start']))  # noqa: E501
        if 'range_stop' in params:
            query_params.append(('range_stop', params['range_stop']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/reference/genomes/{genomeBuildAccession}/chromosomes/{chromosomeAccession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferenceSequence',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reference_genome(self, genome_build_accession, **kwargs):  # noqa: E501
        """Reference genome metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_genome(genome_build_accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str genome_build_accession: (required)
        :param str x_fields: An optional fields mask
        :return: list[ReferenceChromosomeOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_reference_genome_with_http_info(genome_build_accession, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reference_genome_with_http_info(genome_build_accession, **kwargs)  # noqa: E501
            return data

    def get_reference_genome_with_http_info(self, genome_build_accession, **kwargs):  # noqa: E501
        """Reference genome metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_genome_with_http_info(genome_build_accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str genome_build_accession: (required)
        :param str x_fields: An optional fields mask
        :return: list[ReferenceChromosomeOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['genome_build_accession', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_genome" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'genome_build_accession' is set
        if ('genome_build_accession' not in params or
                params['genome_build_accession'] is None):
            raise ValueError("Missing the required parameter `genome_build_accession` when calling `get_reference_genome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_build_accession' in params:
            path_params['genomeBuildAccession'] = params['genome_build_accession']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/reference/genomes/{genomeBuildAccession}/chromosomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReferenceChromosomeOverview]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reference_genomes_group(self, **kwargs):  # noqa: E501
        """Reference genome builds  # noqa: E501

        Lists reference genome builds that are available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_genomes_group(async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_fields: An optional fields mask
        :return: list[ReferenceGenomeOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_reference_genomes_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_reference_genomes_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_reference_genomes_group_with_http_info(self, **kwargs):  # noqa: E501
        """Reference genome builds  # noqa: E501

        Lists reference genome builds that are available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_genomes_group_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_fields: An optional fields mask
        :return: list[ReferenceGenomeOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_genomes_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/reference/genomes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReferenceGenomeOverview]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reference_snp(self, snp_accession, **kwargs):  # noqa: E501
        """Reference SNP data  # noqa: E501

        Get reference SNP information, from dbSNP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_snp(snp_accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snp_accession: The rsId of the SNP (required)
        :param int dbsnp_version: The dbSNP build. Defaults to 149
        :param str grch_version: The GRCh build on which to place snips. Defaults to GRCh37p13
        :param str x_fields: An optional fields mask
        :return: PublicSNP
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_reference_snp_with_http_info(snp_accession, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reference_snp_with_http_info(snp_accession, **kwargs)  # noqa: E501
            return data

    def get_reference_snp_with_http_info(self, snp_accession, **kwargs):  # noqa: E501
        """Reference SNP data  # noqa: E501

        Get reference SNP information, from dbSNP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_reference_snp_with_http_info(snp_accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snp_accession: The rsId of the SNP (required)
        :param int dbsnp_version: The dbSNP build. Defaults to 149
        :param str grch_version: The GRCh build on which to place snips. Defaults to GRCh37p13
        :param str x_fields: An optional fields mask
        :return: PublicSNP
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snp_accession', 'dbsnp_version', 'grch_version', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_snp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snp_accession' is set
        if ('snp_accession' not in params or
                params['snp_accession'] is None):
            raise ValueError("Missing the required parameter `snp_accession` when calling `get_reference_snp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snp_accession' in params:
            path_params['snpAccession'] = params['snp_accession']  # noqa: E501

        query_params = []
        if 'dbsnp_version' in params:
            query_params.append(('dbsnp_version', params['dbsnp_version']))  # noqa: E501
        if 'grch_version' in params:
            query_params.append(('grch_version', params['grch_version']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/reference/snps/{snpAccession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicSNP',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_authorization_result_credentials(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """Provide a result for the authorization  # noqa: E501

        These can be log-in credentials for a website where the result is available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_authorization_result_credentials(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :param str credentials_username: Credentials for accessing the result. Includes password, username and url
        :param str credentials_password: Credentials for accessing the result. Includes password, username and url
        :param str report_url: Credentials for accessing the result. Includes password, username and url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_authorization_result_credentials_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_authorization_result_credentials_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
            return data

    def post_authorization_result_credentials_with_http_info(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """Provide a result for the authorization  # noqa: E501

        These can be log-in credentials for a website where the result is available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_authorization_result_credentials_with_http_info(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :param str credentials_username: Credentials for accessing the result. Includes password, username and url
        :param str credentials_password: Credentials for accessing the result. Includes password, username and url
        :param str report_url: Credentials for accessing the result. Includes password, username and url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'authorization_id', 'credentials_username', 'credentials_password', 'report_url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_authorization_result_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `post_authorization_result_credentials`")  # noqa: E501
        # verify the required parameter 'authorization_id' is set
        if ('authorization_id' not in params or
                params['authorization_id'] is None):
            raise ValueError("Missing the required parameter `authorization_id` when calling `post_authorization_result_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'authorization_id' in params:
            path_params['authorizationId'] = params['authorization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'credentials_username' in params:
            form_params.append(('credentials_username', params['credentials_username']))  # noqa: E501
        if 'credentials_password' in params:
            form_params.append(('credentials_password', params['credentials_password']))  # noqa: E501
        if 'report_url' in params:
            form_params.append(('report_url', params['report_url']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productId}/authorizations/{authorizationId}/credentials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_authorization_result_file(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """Provide a file result to the authorization, e  # noqa: E501

        g. a pdf report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_authorization_result_file(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :param file file_report: A binary file (e.g. pdf) that contains the result of the authorization
        :param str original_filename: Optional original filename for the report. If not provided, the filename of uploaded file will be used
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_authorization_result_file_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_authorization_result_file_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
            return data

    def post_authorization_result_file_with_http_info(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """Provide a file result to the authorization, e  # noqa: E501

        g. a pdf report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_authorization_result_file_with_http_info(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :param file file_report: A binary file (e.g. pdf) that contains the result of the authorization
        :param str original_filename: Optional original filename for the report. If not provided, the filename of uploaded file will be used
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'authorization_id', 'file_report', 'original_filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_authorization_result_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `post_authorization_result_file`")  # noqa: E501
        # verify the required parameter 'authorization_id' is set
        if ('authorization_id' not in params or
                params['authorization_id'] is None):
            raise ValueError("Missing the required parameter `authorization_id` when calling `post_authorization_result_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'authorization_id' in params:
            path_params['authorizationId'] = params['authorization_id']  # noqa: E501

        query_params = []
        if 'original_filename' in params:
            query_params.append(('original_filename', params['original_filename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file_report' in params:
            local_var_files['file_report'] = params['file_report']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productId}/authorizations/{authorizationId}/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_client_snp_group(self, client_id, dataset_id, snps, **kwargs):  # noqa: E501
        """Get a large group of SNPs  # noqa: E501

        SNPs that are not present in the dataset are ignored, 404 is returned only if the dataset/client does not exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_client_snp_group(client_id, dataset_id, snps, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str snps: JSON-encoded list of snps to be fetched (required)
        :param str x_fields: An optional fields mask
        :return: list[ClientSNP]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_client_snp_group_with_http_info(client_id, dataset_id, snps, **kwargs)  # noqa: E501
        else:
            (data) = self.post_client_snp_group_with_http_info(client_id, dataset_id, snps, **kwargs)  # noqa: E501
            return data

    def post_client_snp_group_with_http_info(self, client_id, dataset_id, snps, **kwargs):  # noqa: E501
        """Get a large group of SNPs  # noqa: E501

        SNPs that are not present in the dataset are ignored, 404 is returned only if the dataset/client does not exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_client_snp_group_with_http_info(client_id, dataset_id, snps, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The UUID of the client (required)
        :param str dataset_id: The UUID of one of the client's dataset (required)
        :param str snps: JSON-encoded list of snps to be fetched (required)
        :param str x_fields: An optional fields mask
        :return: list[ClientSNP]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'dataset_id', 'snps', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_client_snp_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `post_client_snp_group`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `post_client_snp_group`")  # noqa: E501
        # verify the required parameter 'snps' is set
        if ('snps' not in params or
                params['snps'] is None):
            raise ValueError("Missing the required parameter `snps` when calling `post_client_snp_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'snps' in params:
            form_params.append(('snps', params['snps']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/datasets/{datasetId}/snps/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientSNP]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_product_authorization(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """Singnal that processing is complete, without uploading any result  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_product_authorization(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_product_authorization_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_product_authorization_with_http_info(product_id, authorization_id, **kwargs)  # noqa: E501
            return data

    def post_product_authorization_with_http_info(self, product_id, authorization_id, **kwargs):  # noqa: E501
        """Singnal that processing is complete, without uploading any result  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_product_authorization_with_http_info(product_id, authorization_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The UUID of the product (required)
        :param str authorization_id: The UUID of the authorization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'authorization_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_product_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `post_product_authorization`")  # noqa: E501
        # verify the required parameter 'authorization_id' is set
        if ('authorization_id' not in params or
                params['authorization_id'] is None):
            raise ValueError("Missing the required parameter `authorization_id` when calling `post_product_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'authorization_id' in params:
            path_params['authorizationId'] = params['authorization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productId}/authorizations/{authorizationId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
