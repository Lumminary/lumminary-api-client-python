# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lumminary_sdk.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_jwt_auth(self, username, password, role, **kwargs):  # noqa: E501
        """General-purpose authentication  # noqa: E501

        If 2FA is enabled, the 2FA token is validated along with the username/password pair. Otherwise, the 2FA token, even if provided, is ignored.  ## Note: * A fresh and not previously used 2FA token should be passed, otherwise authentication will fail. * The JWT tokens returned should be passed to any resource that requires authentication, in the Authentication header, in the format `Bearer: your-token-here` * Only JWT authentication tokens are provided (no refresh tokens). These tokens are valid for 30 seconds from the moment they were issued  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_jwt_auth(username, password, role, async=True)
        >>> result = thread.get()

        :param async bool
        :param str username: The email for a Client, or the API for a partner product (required)
        :param str password: The passowrd for a Client, or the API key for a service (required)
        :param str role: The role for which authentication will be made. Value : role_product (required)
        :param str _2_fa_token: The One-time password provided by a 2FA product, if enabled
        :param str x_fields: An optional fields mask
        :return: JavascriptWebToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_jwt_auth_with_http_info(username, password, role, **kwargs)  # noqa: E501
        else:
            (data) = self.post_jwt_auth_with_http_info(username, password, role, **kwargs)  # noqa: E501
            return data

    def post_jwt_auth_with_http_info(self, username, password, role, **kwargs):  # noqa: E501
        """General-purpose authentication  # noqa: E501

        If 2FA is enabled, the 2FA token is validated along with the username/password pair. Otherwise, the 2FA token, even if provided, is ignored.  ## Note: * A fresh and not previously used 2FA token should be passed, otherwise authentication will fail. * The JWT tokens returned should be passed to any resource that requires authentication, in the Authentication header, in the format `Bearer: your-token-here` * Only JWT authentication tokens are provided (no refresh tokens). These tokens are valid for 30 seconds from the moment they were issued  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_jwt_auth_with_http_info(username, password, role, async=True)
        >>> result = thread.get()

        :param async bool
        :param str username: The email for a Client, or the API for a partner product (required)
        :param str password: The passowrd for a Client, or the API key for a service (required)
        :param str role: The role for which authentication will be made. Value : role_product (required)
        :param str _2_fa_token: The One-time password provided by a 2FA product, if enabled
        :param str x_fields: An optional fields mask
        :return: JavascriptWebToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'password', 'role', '_2_fa_token', 'x_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_jwt_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `post_jwt_auth`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `post_jwt_auth`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `post_jwt_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'role' in params:
            form_params.append(('role', params['role']))  # noqa: E501
        if '_2_fa_token' in params:
            form_params.append(('2FA-token', params['_2_fa_token']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavascriptWebToken',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
