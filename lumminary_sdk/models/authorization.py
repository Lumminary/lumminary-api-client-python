# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lumminary_sdk.models.access_scope import AccessScope  # noqa: F401,E501
from lumminary_sdk.models.report_credentials import ReportCredentials  # noqa: F401,E501
from lumminary_sdk.models.report_file import ReportFile  # noqa: F401,E501


class Authorization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scopes': 'AccessScope',
        'client_uuid': 'str',
        'is_active': 'bool',
        'authorization_uuid': 'str',
        'product_uuid': 'str',
        'state': 'str',
        'create_timestamp': 'int',
        'report_credentials': 'list[ReportCredentials]',
        'report_files': 'list[ReportFile]',
        'order': 'str',
        'sequence_number': 'int'
    }

    attribute_map = {
        'scopes': 'scopes',
        'client_uuid': 'client_uuid',
        'is_active': 'is_active',
        'authorization_uuid': 'authorization_uuid',
        'product_uuid': 'product_uuid',
        'state': 'state',
        'create_timestamp': 'create_timestamp',
        'report_credentials': 'report_credentials',
        'report_files': 'report_files',
        'order': 'order',
        'sequence_number': 'sequence_number'
    }

    def __init__(self, scopes=None, client_uuid=None, is_active=None, authorization_uuid=None, product_uuid=None, state=None, create_timestamp=None, report_credentials=None, report_files=None, order=None, sequence_number=None):  # noqa: E501
        """Authorization - a model defined in Swagger"""  # noqa: E501

        self._scopes = None
        self._client_uuid = None
        self._is_active = None
        self._authorization_uuid = None
        self._product_uuid = None
        self._state = None
        self._create_timestamp = None
        self._report_credentials = None
        self._report_files = None
        self._order = None
        self._sequence_number = None
        self.discriminator = None

        self.scopes = scopes
        self.client_uuid = client_uuid
        self.is_active = is_active
        self.authorization_uuid = authorization_uuid
        self.product_uuid = product_uuid
        self.state = state
        self.create_timestamp = create_timestamp
        if report_credentials is not None:
            self.report_credentials = report_credentials
        if report_files is not None:
            self.report_files = report_files
        if order is not None:
            self.order = order
        if sequence_number is not None:
            self.sequence_number = sequence_number

    @property
    def scopes(self):
        """Gets the scopes of this Authorization.  # noqa: E501


        :return: The scopes of this Authorization.  # noqa: E501
        :rtype: AccessScope
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Authorization.


        :param scopes: The scopes of this Authorization.  # noqa: E501
        :type: AccessScope
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    @property
    def client_uuid(self):
        """Gets the client_uuid of this Authorization.  # noqa: E501

        The UUID of the client owning the Dataset to which the product is authorized  # noqa: E501

        :return: The client_uuid of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._client_uuid

    @client_uuid.setter
    def client_uuid(self, client_uuid):
        """Sets the client_uuid of this Authorization.

        The UUID of the client owning the Dataset to which the product is authorized  # noqa: E501

        :param client_uuid: The client_uuid of this Authorization.  # noqa: E501
        :type: str
        """
        if client_uuid is None:
            raise ValueError("Invalid value for `client_uuid`, must not be `None`")  # noqa: E501

        self._client_uuid = client_uuid

    @property
    def is_active(self):
        """Gets the is_active of this Authorization.  # noqa: E501

        If false, the the authorization is revoked and data access authorizations fail  # noqa: E501

        :return: The is_active of this Authorization.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Authorization.

        If false, the the authorization is revoked and data access authorizations fail  # noqa: E501

        :param is_active: The is_active of this Authorization.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def authorization_uuid(self):
        """Gets the authorization_uuid of this Authorization.  # noqa: E501

        Identifier of the Authorization  # noqa: E501

        :return: The authorization_uuid of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._authorization_uuid

    @authorization_uuid.setter
    def authorization_uuid(self, authorization_uuid):
        """Sets the authorization_uuid of this Authorization.

        Identifier of the Authorization  # noqa: E501

        :param authorization_uuid: The authorization_uuid of this Authorization.  # noqa: E501
        :type: str
        """
        if authorization_uuid is None:
            raise ValueError("Invalid value for `authorization_uuid`, must not be `None`")  # noqa: E501

        self._authorization_uuid = authorization_uuid

    @property
    def product_uuid(self):
        """Gets the product_uuid of this Authorization.  # noqa: E501

        Identifier of the Product to be authorized  # noqa: E501

        :return: The product_uuid of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """Sets the product_uuid of this Authorization.

        Identifier of the Product to be authorized  # noqa: E501

        :param product_uuid: The product_uuid of this Authorization.  # noqa: E501
        :type: str
        """
        if product_uuid is None:
            raise ValueError("Invalid value for `product_uuid`, must not be `None`")  # noqa: E501

        self._product_uuid = product_uuid

    @property
    def state(self):
        """Gets the state of this Authorization.  # noqa: E501

        The authorization state. One of : ['authorization_state_pending_dataset', 'authorization_state_fulfillable', 'authorization_state_result_available']  # noqa: E501

        :return: The state of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Authorization.

        The authorization state. One of : ['authorization_state_pending_dataset', 'authorization_state_fulfillable', 'authorization_state_result_available']  # noqa: E501

        :param state: The state of this Authorization.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this Authorization.  # noqa: E501

        Creation timestamp for the Authorization  # noqa: E501

        :return: The create_timestamp of this Authorization.  # noqa: E501
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this Authorization.

        Creation timestamp for the Authorization  # noqa: E501

        :param create_timestamp: The create_timestamp of this Authorization.  # noqa: E501
        :type: int
        """
        if create_timestamp is None:
            raise ValueError("Invalid value for `create_timestamp`, must not be `None`")  # noqa: E501

        self._create_timestamp = create_timestamp

    @property
    def report_credentials(self):
        """Gets the report_credentials of this Authorization.  # noqa: E501


        :return: The report_credentials of this Authorization.  # noqa: E501
        :rtype: list[ReportCredentials]
        """
        return self._report_credentials

    @report_credentials.setter
    def report_credentials(self, report_credentials):
        """Sets the report_credentials of this Authorization.


        :param report_credentials: The report_credentials of this Authorization.  # noqa: E501
        :type: list[ReportCredentials]
        """

        self._report_credentials = report_credentials

    @property
    def report_files(self):
        """Gets the report_files of this Authorization.  # noqa: E501


        :return: The report_files of this Authorization.  # noqa: E501
        :rtype: list[ReportFile]
        """
        return self._report_files

    @report_files.setter
    def report_files(self, report_files):
        """Sets the report_files of this Authorization.


        :param report_files: The report_files of this Authorization.  # noqa: E501
        :type: list[ReportFile]
        """

        self._report_files = report_files

    @property
    def order(self):
        """Gets the order of this Authorization.  # noqa: E501

        Optional UUID of the Order that created the Authorization  # noqa: E501

        :return: The order of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Authorization.

        Optional UUID of the Order that created the Authorization  # noqa: E501

        :param order: The order of this Authorization.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Authorization.  # noqa: E501

        The sequence number of the Authorization. Used as a filter when fetching new Authorizations  # noqa: E501

        :return: The sequence_number of this Authorization.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Authorization.

        The sequence number of the Authorization. Used as a filter when fetching new Authorizations  # noqa: E501

        :param sequence_number: The sequence_number of this Authorization.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Authorization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
