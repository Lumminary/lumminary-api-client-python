# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lumminary_sdk.models.snps_min_required import SnpsMinRequired  # noqa: F401,E501


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snps_authorized_any': 'bool',
        'snps_authorized': 'list[str]',
        'authorized_scopes': 'list[str]',
        'email': 'str',
        'redirect_uri': 'str',
        'snps_min_required_any': 'bool',
        'snps_min_required': 'SnpsMinRequired',
        'product_uuid': 'str'
    }

    attribute_map = {
        'snps_authorized_any': 'snps_authorized_any',
        'snps_authorized': 'snps_authorized',
        'authorized_scopes': 'authorized_scopes',
        'email': 'email',
        'redirect_uri': 'redirect_uri',
        'snps_min_required_any': 'snps_min_required_any',
        'snps_min_required': 'snps_min_required',
        'product_uuid': 'product_uuid'
    }

    def __init__(self, snps_authorized_any=None, snps_authorized=None, authorized_scopes=None, email=None, redirect_uri=None, snps_min_required_any=None, snps_min_required=None, product_uuid=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501

        self._snps_authorized_any = None
        self._snps_authorized = None
        self._authorized_scopes = None
        self._email = None
        self._redirect_uri = None
        self._snps_min_required_any = None
        self._snps_min_required = None
        self._product_uuid = None
        self.discriminator = None

        self.snps_authorized_any = snps_authorized_any
        self.snps_authorized = snps_authorized
        self.authorized_scopes = authorized_scopes
        if email is not None:
            self.email = email
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        self.snps_min_required_any = snps_min_required_any
        self.snps_min_required = snps_min_required
        self.product_uuid = product_uuid

    @property
    def snps_authorized_any(self):
        """Gets the snps_authorized_any of this Product.  # noqa: E501

        A boolean value specifying if SNP set is not strict  # noqa: E501

        :return: The snps_authorized_any of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._snps_authorized_any

    @snps_authorized_any.setter
    def snps_authorized_any(self, snps_authorized_any):
        """Sets the snps_authorized_any of this Product.

        A boolean value specifying if SNP set is not strict  # noqa: E501

        :param snps_authorized_any: The snps_authorized_any of this Product.  # noqa: E501
        :type: bool
        """
        if snps_authorized_any is None:
            raise ValueError("Invalid value for `snps_authorized_any`, must not be `None`")  # noqa: E501

        self._snps_authorized_any = snps_authorized_any

    @property
    def snps_authorized(self):
        """Gets the snps_authorized of this Product.  # noqa: E501

        A superset of snps_min_required, containing all SNPs to which an Product has access (includes optional SNPs)  # noqa: E501

        :return: The snps_authorized of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._snps_authorized

    @snps_authorized.setter
    def snps_authorized(self, snps_authorized):
        """Sets the snps_authorized of this Product.

        A superset of snps_min_required, containing all SNPs to which an Product has access (includes optional SNPs)  # noqa: E501

        :param snps_authorized: The snps_authorized of this Product.  # noqa: E501
        :type: list[str]
        """
        if snps_authorized is None:
            raise ValueError("Invalid value for `snps_authorized`, must not be `None`")  # noqa: E501

        self._snps_authorized = snps_authorized

    @property
    def authorized_scopes(self):
        """Gets the authorized_scopes of this Product.  # noqa: E501

        A list of scopes that the product can require from clients  # noqa: E501

        :return: The authorized_scopes of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_scopes

    @authorized_scopes.setter
    def authorized_scopes(self, authorized_scopes):
        """Sets the authorized_scopes of this Product.

        A list of scopes that the product can require from clients  # noqa: E501

        :param authorized_scopes: The authorized_scopes of this Product.  # noqa: E501
        :type: list[str]
        """
        if authorized_scopes is None:
            raise ValueError("Invalid value for `authorized_scopes`, must not be `None`")  # noqa: E501

        self._authorized_scopes = authorized_scopes

    @property
    def email(self):
        """Gets the email of this Product.  # noqa: E501

        The contact email for the product  # noqa: E501

        :return: The email of this Product.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Product.

        The contact email for the product  # noqa: E501

        :param email: The email of this Product.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Product.  # noqa: E501

        A redirect url registered as a callback for the Connect with Lumminary authorization flow  # noqa: E501

        :return: The redirect_uri of this Product.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Product.

        A redirect url registered as a callback for the Connect with Lumminary authorization flow  # noqa: E501

        :param redirect_uri: The redirect_uri of this Product.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def snps_min_required_any(self):
        """Gets the snps_min_required_any of this Product.  # noqa: E501

        A boolean value specifying if SNP set is not strict  # noqa: E501

        :return: The snps_min_required_any of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._snps_min_required_any

    @snps_min_required_any.setter
    def snps_min_required_any(self, snps_min_required_any):
        """Sets the snps_min_required_any of this Product.

        A boolean value specifying if SNP set is not strict  # noqa: E501

        :param snps_min_required_any: The snps_min_required_any of this Product.  # noqa: E501
        :type: bool
        """
        if snps_min_required_any is None:
            raise ValueError("Invalid value for `snps_min_required_any`, must not be `None`")  # noqa: E501

        self._snps_min_required_any = snps_min_required_any

    @property
    def snps_min_required(self):
        """Gets the snps_min_required of this Product.  # noqa: E501

        Minimum required snps for Dataset-Product compatibility  # noqa: E501

        :return: The snps_min_required of this Product.  # noqa: E501
        :rtype: SnpsMinRequired
        """
        return self._snps_min_required

    @snps_min_required.setter
    def snps_min_required(self, snps_min_required):
        """Sets the snps_min_required of this Product.

        Minimum required snps for Dataset-Product compatibility  # noqa: E501

        :param snps_min_required: The snps_min_required of this Product.  # noqa: E501
        :type: SnpsMinRequired
        """
        if snps_min_required is None:
            raise ValueError("Invalid value for `snps_min_required`, must not be `None`")  # noqa: E501

        self._snps_min_required = snps_min_required

    @property
    def product_uuid(self):
        """Gets the product_uuid of this Product.  # noqa: E501

        The product identifier  # noqa: E501

        :return: The product_uuid of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """Sets the product_uuid of this Product.

        The product identifier  # noqa: E501

        :param product_uuid: The product_uuid of this Product.  # noqa: E501
        :type: str
        """
        if product_uuid is None:
            raise ValueError("Invalid value for `product_uuid`, must not be `None`")  # noqa: E501

        self._product_uuid = product_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
