# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lumminary_sdk.models.file_location import FileLocation  # noqa: F401,E501


class ReportFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_location': 'FileLocation',
        'authorization_uuid': 'str',
        'create_timestamp': 'int',
        'report_file_uuid': 'str'
    }

    attribute_map = {
        'file_location': 'file_location',
        'authorization_uuid': 'authorization_uuid',
        'create_timestamp': 'create_timestamp',
        'report_file_uuid': 'report_file_uuid'
    }

    def __init__(self, file_location=None, authorization_uuid=None, create_timestamp=None, report_file_uuid=None):  # noqa: E501
        """ReportFile - a model defined in Swagger"""  # noqa: E501

        self._file_location = None
        self._authorization_uuid = None
        self._create_timestamp = None
        self._report_file_uuid = None
        self.discriminator = None

        self.file_location = file_location
        self.authorization_uuid = authorization_uuid
        self.create_timestamp = create_timestamp
        self.report_file_uuid = report_file_uuid

    @property
    def file_location(self):
        """Gets the file_location of this ReportFile.  # noqa: E501


        :return: The file_location of this ReportFile.  # noqa: E501
        :rtype: FileLocation
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this ReportFile.


        :param file_location: The file_location of this ReportFile.  # noqa: E501
        :type: FileLocation
        """
        if file_location is None:
            raise ValueError("Invalid value for `file_location`, must not be `None`")  # noqa: E501

        self._file_location = file_location

    @property
    def authorization_uuid(self):
        """Gets the authorization_uuid of this ReportFile.  # noqa: E501

        The uuid of the authorization that generated this report  # noqa: E501

        :return: The authorization_uuid of this ReportFile.  # noqa: E501
        :rtype: str
        """
        return self._authorization_uuid

    @authorization_uuid.setter
    def authorization_uuid(self, authorization_uuid):
        """Sets the authorization_uuid of this ReportFile.

        The uuid of the authorization that generated this report  # noqa: E501

        :param authorization_uuid: The authorization_uuid of this ReportFile.  # noqa: E501
        :type: str
        """
        if authorization_uuid is None:
            raise ValueError("Invalid value for `authorization_uuid`, must not be `None`")  # noqa: E501

        self._authorization_uuid = authorization_uuid

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ReportFile.  # noqa: E501

        Creation timestamp for Report  # noqa: E501

        :return: The create_timestamp of this ReportFile.  # noqa: E501
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ReportFile.

        Creation timestamp for Report  # noqa: E501

        :param create_timestamp: The create_timestamp of this ReportFile.  # noqa: E501
        :type: int
        """
        if create_timestamp is None:
            raise ValueError("Invalid value for `create_timestamp`, must not be `None`")  # noqa: E501

        self._create_timestamp = create_timestamp

    @property
    def report_file_uuid(self):
        """Gets the report_file_uuid of this ReportFile.  # noqa: E501

        The uuid of the report  # noqa: E501

        :return: The report_file_uuid of this ReportFile.  # noqa: E501
        :rtype: str
        """
        return self._report_file_uuid

    @report_file_uuid.setter
    def report_file_uuid(self, report_file_uuid):
        """Sets the report_file_uuid of this ReportFile.

        The uuid of the report  # noqa: E501

        :param report_file_uuid: The report_file_uuid of this ReportFile.  # noqa: E501
        :type: str
        """
        if report_file_uuid is None:
            raise ValueError("Invalid value for `report_file_uuid`, must not be `None`")  # noqa: E501

        self._report_file_uuid = report_file_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
