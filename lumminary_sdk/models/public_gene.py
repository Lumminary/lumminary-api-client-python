# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PublicGene(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'molecular_end_position': 'int',
        'snp_ids': 'list[str]',
        'symbol': 'str',
        'molecular_start_position': 'int',
        'parent_accession': 'str',
        'chromosome': 'str'
    }

    attribute_map = {
        'molecular_end_position': 'molecular_end_position',
        'snp_ids': 'snp_ids',
        'symbol': 'symbol',
        'molecular_start_position': 'molecular_start_position',
        'parent_accession': 'parent_accession',
        'chromosome': 'chromosome'
    }

    def __init__(self, molecular_end_position=None, snp_ids=None, symbol=None, molecular_start_position=None, parent_accession=None, chromosome=None):  # noqa: E501
        """PublicGene - a model defined in Swagger"""  # noqa: E501

        self._molecular_end_position = None
        self._snp_ids = None
        self._symbol = None
        self._molecular_start_position = None
        self._parent_accession = None
        self._chromosome = None
        self.discriminator = None

        self.molecular_end_position = molecular_end_position
        self.snp_ids = snp_ids
        self.symbol = symbol
        self.molecular_start_position = molecular_start_position
        self.parent_accession = parent_accession
        self.chromosome = chromosome

    @property
    def molecular_end_position(self):
        """Gets the molecular_end_position of this PublicGene.  # noqa: E501

        The gene's end position on the scaffold  # noqa: E501

        :return: The molecular_end_position of this PublicGene.  # noqa: E501
        :rtype: int
        """
        return self._molecular_end_position

    @molecular_end_position.setter
    def molecular_end_position(self, molecular_end_position):
        """Sets the molecular_end_position of this PublicGene.

        The gene's end position on the scaffold  # noqa: E501

        :param molecular_end_position: The molecular_end_position of this PublicGene.  # noqa: E501
        :type: int
        """
        if molecular_end_position is None:
            raise ValueError("Invalid value for `molecular_end_position`, must not be `None`")  # noqa: E501
        if molecular_end_position is not None and molecular_end_position < 0:  # noqa: E501
            raise ValueError("Invalid value for `molecular_end_position`, must be a value greater than or equal to `0`")  # noqa: E501

        self._molecular_end_position = molecular_end_position

    @property
    def snp_ids(self):
        """Gets the snp_ids of this PublicGene.  # noqa: E501

        The SNPs contained in the gene  # noqa: E501

        :return: The snp_ids of this PublicGene.  # noqa: E501
        :rtype: list[str]
        """
        return self._snp_ids

    @snp_ids.setter
    def snp_ids(self, snp_ids):
        """Sets the snp_ids of this PublicGene.

        The SNPs contained in the gene  # noqa: E501

        :param snp_ids: The snp_ids of this PublicGene.  # noqa: E501
        :type: list[str]
        """
        if snp_ids is None:
            raise ValueError("Invalid value for `snp_ids`, must not be `None`")  # noqa: E501

        self._snp_ids = snp_ids

    @property
    def symbol(self):
        """Gets the symbol of this PublicGene.  # noqa: E501

        The gene accession string  # noqa: E501

        :return: The symbol of this PublicGene.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this PublicGene.

        The gene accession string  # noqa: E501

        :param symbol: The symbol of this PublicGene.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501
        if symbol is not None and len(symbol) < 1:
            raise ValueError("Invalid value for `symbol`, length must be greater than or equal to `1`")  # noqa: E501

        self._symbol = symbol

    @property
    def molecular_start_position(self):
        """Gets the molecular_start_position of this PublicGene.  # noqa: E501

        The gene's start position on the scaffold  # noqa: E501

        :return: The molecular_start_position of this PublicGene.  # noqa: E501
        :rtype: int
        """
        return self._molecular_start_position

    @molecular_start_position.setter
    def molecular_start_position(self, molecular_start_position):
        """Sets the molecular_start_position of this PublicGene.

        The gene's start position on the scaffold  # noqa: E501

        :param molecular_start_position: The molecular_start_position of this PublicGene.  # noqa: E501
        :type: int
        """
        if molecular_start_position is None:
            raise ValueError("Invalid value for `molecular_start_position`, must not be `None`")  # noqa: E501
        if molecular_start_position is not None and molecular_start_position < 0:  # noqa: E501
            raise ValueError("Invalid value for `molecular_start_position`, must be a value greater than or equal to `0`")  # noqa: E501

        self._molecular_start_position = molecular_start_position

    @property
    def parent_accession(self):
        """Gets the parent_accession of this PublicGene.  # noqa: E501

        The scaffold on which the gene is placed  # noqa: E501

        :return: The parent_accession of this PublicGene.  # noqa: E501
        :rtype: str
        """
        return self._parent_accession

    @parent_accession.setter
    def parent_accession(self, parent_accession):
        """Sets the parent_accession of this PublicGene.

        The scaffold on which the gene is placed  # noqa: E501

        :param parent_accession: The parent_accession of this PublicGene.  # noqa: E501
        :type: str
        """
        if parent_accession is None:
            raise ValueError("Invalid value for `parent_accession`, must not be `None`")  # noqa: E501
        if parent_accession is not None and len(parent_accession) < 1:
            raise ValueError("Invalid value for `parent_accession`, length must be greater than or equal to `1`")  # noqa: E501

        self._parent_accession = parent_accession

    @property
    def chromosome(self):
        """Gets the chromosome of this PublicGene.  # noqa: E501

        The cromosome on which the gene is placed  # noqa: E501

        :return: The chromosome of this PublicGene.  # noqa: E501
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this PublicGene.

        The cromosome on which the gene is placed  # noqa: E501

        :param chromosome: The chromosome of this PublicGene.  # noqa: E501
        :type: str
        """
        if chromosome is None:
            raise ValueError("Invalid value for `chromosome`, must not be `None`")  # noqa: E501
        if chromosome is not None and len(chromosome) < 1:
            raise ValueError("Invalid value for `chromosome`, length must be greater than or equal to `1`")  # noqa: E501

        self._chromosome = chromosome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicGene):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
