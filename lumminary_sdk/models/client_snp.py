# coding: utf-8

"""
    Lumminary API

    A general-purpose API for accessing genomic data  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientSNP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'int',
        'reference_genome': 'str',
        'phased': 'bool',
        'genotyped_alleles': 'list[str]',
        'snp_id': 'str',
        'chromosome_accession': 'str'
    }

    attribute_map = {
        'location': 'location',
        'reference_genome': 'reference_genome',
        'phased': 'phased',
        'genotyped_alleles': 'genotyped_alleles',
        'snp_id': 'snp_id',
        'chromosome_accession': 'chromosome_accession'
    }

    def __init__(self, location=None, reference_genome=None, phased=None, genotyped_alleles=None, snp_id=None, chromosome_accession=None):  # noqa: E501
        """ClientSNP - a model defined in Swagger"""  # noqa: E501

        self._location = None
        self._reference_genome = None
        self._phased = None
        self._genotyped_alleles = None
        self._snp_id = None
        self._chromosome_accession = None
        self.discriminator = None

        self.location = location
        self.reference_genome = reference_genome
        self.phased = phased
        self.genotyped_alleles = genotyped_alleles
        self.snp_id = snp_id
        self.chromosome_accession = chromosome_accession

    @property
    def location(self):
        """Gets the location of this ClientSNP.  # noqa: E501

        The SNP's position on the chromosome  # noqa: E501

        :return: The location of this ClientSNP.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ClientSNP.

        The SNP's position on the chromosome  # noqa: E501

        :param location: The location of this ClientSNP.  # noqa: E501
        :type: int
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        if location is not None and location < 0:  # noqa: E501
            raise ValueError("Invalid value for `location`, must be a value greater than or equal to `0`")  # noqa: E501

        self._location = location

    @property
    def reference_genome(self):
        """Gets the reference_genome of this ClientSNP.  # noqa: E501

        The ID and build number of the genome against which the SNP was built and placed  # noqa: E501

        :return: The reference_genome of this ClientSNP.  # noqa: E501
        :rtype: str
        """
        return self._reference_genome

    @reference_genome.setter
    def reference_genome(self, reference_genome):
        """Sets the reference_genome of this ClientSNP.

        The ID and build number of the genome against which the SNP was built and placed  # noqa: E501

        :param reference_genome: The reference_genome of this ClientSNP.  # noqa: E501
        :type: str
        """
        if reference_genome is None:
            raise ValueError("Invalid value for `reference_genome`, must not be `None`")  # noqa: E501
        if reference_genome is not None and len(reference_genome) < 1:
            raise ValueError("Invalid value for `reference_genome`, length must be greater than or equal to `1`")  # noqa: E501

        self._reference_genome = reference_genome

    @property
    def phased(self):
        """Gets the phased of this ClientSNP.  # noqa: E501

        True if there is phasing information about the snp, false otherwise  # noqa: E501

        :return: The phased of this ClientSNP.  # noqa: E501
        :rtype: bool
        """
        return self._phased

    @phased.setter
    def phased(self, phased):
        """Sets the phased of this ClientSNP.

        True if there is phasing information about the snp, false otherwise  # noqa: E501

        :param phased: The phased of this ClientSNP.  # noqa: E501
        :type: bool
        """
        if phased is None:
            raise ValueError("Invalid value for `phased`, must not be `None`")  # noqa: E501

        self._phased = phased

    @property
    def genotyped_alleles(self):
        """Gets the genotyped_alleles of this ClientSNP.  # noqa: E501

        A diploid genoyped allele, if available  # noqa: E501

        :return: The genotyped_alleles of this ClientSNP.  # noqa: E501
        :rtype: list[str]
        """
        return self._genotyped_alleles

    @genotyped_alleles.setter
    def genotyped_alleles(self, genotyped_alleles):
        """Sets the genotyped_alleles of this ClientSNP.

        A diploid genoyped allele, if available  # noqa: E501

        :param genotyped_alleles: The genotyped_alleles of this ClientSNP.  # noqa: E501
        :type: list[str]
        """
        if genotyped_alleles is None:
            raise ValueError("Invalid value for `genotyped_alleles`, must not be `None`")  # noqa: E501

        self._genotyped_alleles = genotyped_alleles

    @property
    def snp_id(self):
        """Gets the snp_id of this ClientSNP.  # noqa: E501

        The ID of the SNP  # noqa: E501

        :return: The snp_id of this ClientSNP.  # noqa: E501
        :rtype: str
        """
        return self._snp_id

    @snp_id.setter
    def snp_id(self, snp_id):
        """Sets the snp_id of this ClientSNP.

        The ID of the SNP  # noqa: E501

        :param snp_id: The snp_id of this ClientSNP.  # noqa: E501
        :type: str
        """
        if snp_id is None:
            raise ValueError("Invalid value for `snp_id`, must not be `None`")  # noqa: E501
        if snp_id is not None and len(snp_id) < 1:
            raise ValueError("Invalid value for `snp_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._snp_id = snp_id

    @property
    def chromosome_accession(self):
        """Gets the chromosome_accession of this ClientSNP.  # noqa: E501

        The accession of the chromosome on which the SNP is placed  # noqa: E501

        :return: The chromosome_accession of this ClientSNP.  # noqa: E501
        :rtype: str
        """
        return self._chromosome_accession

    @chromosome_accession.setter
    def chromosome_accession(self, chromosome_accession):
        """Sets the chromosome_accession of this ClientSNP.

        The accession of the chromosome on which the SNP is placed  # noqa: E501

        :param chromosome_accession: The chromosome_accession of this ClientSNP.  # noqa: E501
        :type: str
        """
        if chromosome_accession is None:
            raise ValueError("Invalid value for `chromosome_accession`, must not be `None`")  # noqa: E501
        if chromosome_accession is not None and len(chromosome_accession) < 1:
            raise ValueError("Invalid value for `chromosome_accession`, length must be greater than or equal to `1`")  # noqa: E501

        self._chromosome_accession = chromosome_accession

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientSNP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
